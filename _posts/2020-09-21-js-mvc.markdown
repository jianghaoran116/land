---
layout: post  
title: "MVC"  
date: 2020-09-21  
categories: javascript  
tags: js  
---

## 原生JS开发  
探究一下没有使用框架情况下保证代码质量及开发效率  
先除去工程化的要求，从拆分功能最基础的开始（MVC）  

以开发一个过渡页为例，页面由其他开发者调用，有开始、取消、结束状态，状态变化会触发一些事件  
那么开始分层:  
- Model层:  
  存放页面的状态 表示开始，结束，取消  

- View ViewModel层:  
  - 绘制页面（添加、删除DOM）  
  - 监听事件，包括: 页面的开始、结束、取消事件，同时收集回调函数  

- Controller:  
  - 提供给二次开发用的API, 控制页面开始、结束、取消  
  - 设置Model层的状态，比如开始事件会修改页面状态为已开始  

代码:  
- Model:  
  ``` javascript  
    class VRModel {
      constructor() {
        this._transitionPageStage = null;
      }

      get transitionPageStage() {
        return this._transitionPageStage;
      }

      set transitionPageStage(stage) {
        this._transitionPageStage = stage;
      }
    }
  ```  
  这个时候Model比较单薄，只有一个页面状态  

- View:  
  ``` javascript  
    class TransitionPage {
      constructor(Ai, options, callbacks) {
        // ...
      }

      /**
       * 设置DOM
       */
      addDom() {
        // ...
        template = `<div>xxx</div>`;
        this.$el.innerHTML = template;
        // ...
      }

      /**
       * 移除DOM
       */
      removeDom() {

      }

      /**
      * 给cancel按钮绑定事件
      */
      cancelAddClick() {
        // ...
      }

      /**
      * 给cancel按钮解绑事件
      */
      cancelRemoveClick() {
        // ...
      }

      /**
      * 取消过渡页面
      */
      cancelTransition = () => {
      }

      /**
      * 画页面
      */
      drawPage() {
        // ...
      }

      /**
      * 卸载页面
      */
      destoryPage() {
        // ...
      }

      // --------以下为提供给展示端的方法----------

      /**
       * 渲染过渡页面
       */
      createPage(options) {
        // ...
      }

      /**
       * 渲染过渡页面
       */
      createPageTask(params) {
        // ...
      }

      /**
      * 关闭页面
      */
      finishPage(cb) {
        // ...
      }

      /**
      * 取消页面
      */
      cancelPage(cb) {
        // ...
      }
    }
  ```  
  在这里进行页面的绘制，事件都是通过回调函数来处理  
  二次开发的API也在这层  
- controller层:  
  ``` javascript  
    class VRController {
      constructor(Ai, options) {
        // ...
      }

      initApi = () => {
        // ...
      }

      /**
      * 创建过渡页面
      */
      createTransitionPage = (options) => {
        this.TransitionPage.createPage(options);
      }

      /**
      * 卸载过渡页面
      */
      finishTransitionPage = () => {
        this.TransitionPage.finishPage();
      }

      // ...

    }
  ```  
  这层拿到了view和model 设置自己需要的事件 设置model里的数据  

接下来继续学习一下MVC的概念  

## MVC  
上来直接抛个问题: M越厚越好？  

### Model  
它包含了向上承载的实实在在的业务数据，还有不同数据间的关联关系，**即关心数据的意义，又关心数据本身**，体现业务  
主要的职责:  
- 负责业务需求的内核逻辑  
  把逻辑更多向Model层倾斜，那么Controller层就简洁很多  
- 发出DataChanged事件, 上层就能够感知到Model层的变化  
  事件就是Model层面对需求变化点的对策,用事件回调来解决需求的变化点  

### View/ViewModel  
负责界面呈现 响应用户交互事件  
- 负责界面呈现，View层和Model层的关系非常紧密，紧密到需要知道数据结构的细节  
- 有时候数据到界面这个过程比较复杂的时候就需要加个ViewModel层来做这个事情  
  - ViewModel层是为View的界面呈现而设计的Model层，它的数据组织更接近于View的表达  
  - ViewModel只有View层的数据和可被委托的事件  

### Controller  
控制器是 MVC 的大脑，它知道接下去该让谁去做什么事  
Controller层是负责用户交互的  

### 从分层角度  
- 倾向于认为 Model层在最底层  
- View层在中间，承上启下的桥梁作用，连接Model与Controller，它提供事件委托  
- Controller层在最上方，它知道Model和View层，它通过DOM接口操作Model层，但它并不操作View去改变数据，而只是监听自己感兴趣的事件，然后调用 Model 或 ViewModel 的接口修改数据  

**另一个很重要的需求是提供应用程序的二次开发接口**，这个建议放到ViewModel层，因为这层持用view的数据和Model层的数据  

*个人还是Model觉得model越厚越好，厚能直接体现业务，而且后期的迭代在Model层多，其他层会比较稳定。*  

从上面的角度出发:  
修改点:  
- Model层添加一个订阅发布的库  
- ViewModel层也添加一个订阅发布  
- 绘制页面具体内容上浮到Controller，真正绘制交给View或者Model，这样Controller可以在自己的DOM上添加感兴趣的事件  

这样数据和事件的边界都定义好了  

**修改后的分层:**  
Model层:  
- 页面的状态 因为有个异步事件所以添加了即将取消 即将结束的状态  
- 添加一个监听/发布库，页面状态发生变化时通知上层  
  ``` javascript  
    import PubSub from 'pubsub-js';
    export const TRANSITION_PAGE_STATE_EVENT = Symbol('TRANSITION_PAGE_STATE_EVENT');

    export const TransitionPageState = { // 过渡页状态的map
      start: '...',
      reStart: '...',
      willCancel: '...',
      cancel: '...',
      willEnd: '...',
      end: '...',
    }

    class VRModel {
      constructor() {
        this._transitionPageStage = null;
      }

      // ...

      set transitionPageStage(stage) {
        this._transitionPageStage = stage;
        PubSub.publish(TRANSITION_PAGE_STATE_EVENT, stage);
      }
    }
  ```  
  - 暴露给上层的是监听的事件名称: TRANSITION_PAGE_STATE_EVENT  
  - 添加了状态，主要是根据业务需求定义  
  **相教于之前Model层在状态变化时能发出一个dataChange事件**（正在考虑如果设置的状态和上次一样要不要触发事件）  


View/ViewModel:  
- 绘制页面  
- 提供修改Model层数据的接口  
  ``` javascript  
    // 依旧提供datachange事件 代理model层和自己的数据
    import PubSub from 'pubsub-js';
    // ... 

    class TransitionPage {
      constructor(Ai, options, controller) {
        // ...
        this.pageState = '';

        PubSub.subscribe(TRANSITION_PAGE_STATE_EVENT, this.transitionPageStageChange);
      }

      // 代理了MODEL层的数据的事件 变化了通知上层
      transitionPageStageChange = (msg, stage) => {
        // ...
      }

      // --------- 绘制DOM相关 ---------

      createElement = () => {
        return this.$el = this.controller.render();
      }

      // 把createElement出来的东西挂载到页面上
      $mount = () => {
        // ...
        document.body.appendChild(this.createElement());
        // ...
        // 通知上层DOM绘制结束
        this.controller.mounted && this.controller.mounted();
      }

      // 移除DOM
      $removeDom = () => {
        this.$el && document.body.removeChild(this.$el);
        this.$el = null;
        this.controller.destory && this.controller.destory();
      }

      /**
      * 卸载
      */
      $destory = (stage) => {
        // ...
        this.setTransitionPageState(stage);
        this.$removeDom();
      }

      // --------- 提供接口设置数据 ---------

      /**
      * 设置过渡页面状态
      */
      setTransitionPageState = (state) => {
        vRModel.transitionPageStage = state;
      }

      /**
      * 过渡页面 - 开始
      */
      start = () => {
        // ...
        this.$mount();
        this.setTransitionPageState(TransitionPageState.start);
        // ...
      }

      /**
      * 过渡页面 - 重新开始
      */
      reStart = () => {
        // ...
        this.$mount();
        this.setTransitionPageState(TransitionPageState.reStart);
        // ...
      }

      /**
      * 过渡页面 - 取消
      */
      cancel = () => {
        this.setTransitionPageState(TransitionPageState.willCancel);
        this.$destory(TransitionPageState.cancel);
      }

      /**
      * 过渡页面 - 结束
      */
      end = () => {
        this.setTransitionPageState(TransitionPageState.willEnd);
        this.$destory(TransitionPageState.end);
      }
    }

    export default TransitionPage;

  ```  

Controller:  
- 监听感兴趣的事件  
- 通过调用事件来设置Model的状态  
- 收集第三方的回调函数，适当的时候触发  
  ``` javascript  
    import PubSub from 'pubsub-js';
    // ...

    class VRController {
      constructor(Ai, options) {
        // ...

        PubSub.subscribe(AGENT_PAGE_STATE_EVENT, this.transitionPageStageChange);
      }
      
      // 监听感兴趣的事件
      // 收集第三方的回调函数，适当的时候触发
      transitionPageStageChange = (msg, stage) => {
        this.transitionPageState = stage;
        // ...
        if (stage === AgentTransitionPageState.willCancel) {
          // ...
          this.cancelCallBack && this.cancelCallBack();
        }
        // ...
      }

      /**
      * 要绘制的DOM
      */
      render = () => {
        try {
          template = `<div>xxx</div>`;
          this.$el.innerHTML = template;
          return this.$el;
        } catch (err) {
          console.log(err);
        }
      }

      /**
      * DOM层绘制完的回调
      */
      mounted = () => {
        document.getElementById('...').addEventListener('click', () => {});
      }

      /**
      * 卸载之前的同步事件
      * 这个函数会设置过渡页面是否在卸载中
      */
      beforeDestory = () => {
        return this.fadeOutDom();
      }

      /**
      * VM层绘卸载DOM后会调用一下这个事件通知DOM卸载完成了
      */
      destory = () => {
        document.getElementById('...').removeEventListener('click', () => {});
      }

      // 淡出DOM
      fadeOutDom = () => {
        // ...
      }

      /**
      * 点击取消按钮的事件
      */
      cancelTransitionPageEvent = () => {
        // ...
        this.TransitionPage.cancel();
      }

      // -------------------------------------------------------------------------------

      // 初始化提供给展示端控制的API
      initApi = () => {
        this.Ai.xxx = {
          createTransitionPage: this.createTransitionPage, // 绘制页面
          finishTransitionPage: this.finishTransitionPage, // 卸载页面
          cancelTransitionPage: this.cancelTransitionPage, // 取消页面
        }
      }

      /**
      * 创建过渡页面
      */
      createTransitionPage = (options) => {
        // ...
        this.TransitionPage.start();
        // ...
      }

      /**
      * 卸载过渡页面
      */
      finishTransitionPage = () => {
        // ...
        this.TransitionPage.end();
      }

      /**
      * 取消过渡页面
      */
      cancelTransitionPage = () => {
        this.TransitionPage.cancel();
      }

    }

    export default VRController;

  ```  

整体相比之前的分层:  
- 数据下沉（页面状态在Model层）, 这些数据体现的业务需求  
- 具体的事件上浮，绘制什么DOM上浮到controller层，感兴趣的事件也上浮到controller由自己绑定  
- view层类似一个傀儡，提供一些事件由上层控制  

*Model的数据更新发出DataChanged事件后，由Controller负责监听并Update View，这样就变成了MVP架构*  
所以这里其实更像是MVP模式，如果把更新View放到VM里，就更像是MVVM，Controller层只改状态，VM自动去触发View更新  


### 引入hooks拦截函数  
用于在卸载之前还想处理一些异步或者同步的事件  

# VUE  
## 向大佬（Watcher）递自己  
MVVM 最早是由微软工程师 John Grossman 于 2005 年提出的。ViewModel 作为 View 的数据抽象层，持有 View 的状态和行为。
ViewModel 和 View 不应该有引用关系，而是由中间者，将它们绑定。ViewModel 改变后自动的触发对应 View 的更新，View 的触发事件后，ViewModel 接收并做处理。在实现层面这种绑定关系最适合由响应式框架来做，从而实现 ViewModel 和 View 的双向绑定。  
业务逻辑层，View需要什么数据，ViewModel要提供这个数据；View有某些操作，ViewModel就要响应这些操作，所以可以说它是Model for View.  

# React + (Redux | Mobx)  
- JSX
- Redux 它试图用一种统一的模式和机制来简化状态管理的复杂性，达到复杂系统状态变化“可预测”的目的  
