---
layout: post
title:  "js类"
date:   2019-12-19
categories: javascript
tags: js基础
---
  
## ES5
组合模式:  
``` javascript
let Animate = function(type) {
  this.type = type;
}  
Animate.prototype = {
  constructor: Animate,
  run: function() {
    console.log('Im run');
  }
}

let dog = new Animate('dog');
```  
*应用最广泛的模式*  
动态原型模式:  
``` javascript  
let Animate = function(type) {
  this.type = type;
  if (typeof this.run !== 'function') {
    Animate.prototype = {
      constructor: Animate,
      run: function() {
        console.log('Im run');
      }
    }

    return new Animate(type); 
  }
}
```  
为啥要return Animate(type)   
???  
查理🐎 *先走一波this -> new -> apply*
## ES6  
``` javascript
class Animate {
  constructor(type) {
    this.type = type;
  }

  run() {
    console.log('Im run');
  }
}
```
babel翻译后:  
``` javascript  
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var Animate =
/*#__PURE__*/
function () {
  function Animate(type) {
    (0, _classCallCheck2.default)(this, Animate);
    this.type = type;
  }

  (0, _createClass2.default)(Animate, [{
    key: "run",
    value: function run() {
      console.log('Im run');
    }
  }]);
  return Animate;
}();
```