---
layout: post
title:  "js作用域"
date:   2019-12-09
categories: javascript
tags: js
---

# 什么是作用域  
简单的例子:  
``` javascript
function foo() {
	console.log(a);
}
function bar() {
	var a = 3;
	foo();
}
var a = 2;
bar();
```  
按动态作用域分析: 当foo要解析a的引用时,会沿着**调用栈**往上找。  
按静态作用域分析: 它会按照代码书写的顺序(**作用域链**)往上找,也就是 foo 定义的外层。  
  
## 程序如何存储变量 如何获取这些变量  
### 简单的编译原理  
分词 --> 解析(生成AST) --> 可执行代码  
### 作用域
- 引擎  
- 编译器  
- 作用域 
``` javascript   
var a = 2; // 首先编译器会进行词法分析（拆成词法单元）， 然后生成AST
```  
实际的过程  
1. 编译器询问作用域是否有a在同一个作用域中，如果有，忽略该语句，继续编译，否则要求作用域在当前作用域集合里声明一个变量a。  
2. 编译器会生成供引擎使用的代码。  
3. 在执行a = 2赋值操作时，引擎会先询问作用域在该作用域集合里是否有该变量，如果有引擎就会使用该变量，否则继续查找。  
4. 如果没找到，就会抛出异常。  
*LHS & RHS* 区分这个会理解JS的报错  
``` javascript  
function foo(a) {
  console.log(a)
}

foo(2);
```  
1. 引擎：作用域有foo吗  
2. 作用域：有，是个函数（编译器声明）  
3. 引擎：作用域，有看到a吗
4. 作用域：有，是个变量（编译器声明）  
5. 引擎：赋值  
6. 引擎：有看到console吗  
7. 作用域：是个内置对象  
8. 引擎：执行.log
9. 引擎：有看到a吗
10. 作用域：有给你
11. 引擎：拿到a的值2  
``` javascript  
function foo(a) {
  var b = a;
  return a + b;
}

var c = foo(2);
```  
1. 引擎：有c吗，我要对他赋值（LHS）  
2. 作用域：有，编译器声明了  
3. 引擎：有foo吗，（RHS）  
4. 作用域：有，编译器声明了  
5. 引擎：是个函数，作用域有a吗（LHS）
6. 作用域：有，是个形参
7. 引擎：有b吗？我要对他赋值（LHS）  
8. 作用域：有，给你
9. 引擎：a在哪（RHS）
10. 作用域：没动，给你
11. 引擎：a在哪（RHS）
12. 作用域：给你
13. 引擎：b在哪（RHS）
14. 作用域：给你  
⬆️ 编译器 引擎 作用域  
## 词法作用域  
编译器在第一阶段会对有源码中的字符进行检查，如果有状态会赋于语义。  
## 函数作用域 块级作用域  